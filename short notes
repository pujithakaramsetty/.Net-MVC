===================================================================================ViewData and ViewBag=================================================================================
Both ViewData and ViewBag are used to pass data from a controller to a view. ViewData is a dictionary of objects that are stored and retrieved using strings as keys. 
The syntax of ViewData is very similar to that of ViewState, SessionState and ApplicationState.
// Storing data in ViewData
ViewData["YourData"] = "SomeData";

// Retrieving data from ViewData
string strData = ViewData["YourData"].ToString();

ViewData does not provide compile time error checking. For example, if you mis-spell the key names you wouldn't get any compile time error. You get to know about the error only at runtime.

ViewBag uses the dynamic feature that was introduced in to C# 4.0. It allows an object to have properties dynamically added to it. Using ViewBag the above code can be rewritten as below.
// Storing data in ViewBag
ViewBag.YourData = "SomeData";

// Retrieving data from ViewBag
string strData = ViewBag.YourData;

Just like ViewData, ViewBag does not provide compile time error checking. For example, if you mis-spell the property name, you wouldn't get any compile time error. You get to know about 
the error only at runtime.

Internally ViewBag properties are stored as name/value pairs in the ViewData dictionary.

Please Note: To pass data from controller to a view, It's always a good practice to use strongly typed view models instead of using ViewBag & ViewData. Strongly typed view models  provide
compile time error checking.

->In models created Employees.cs and created empty properties using get,set .
->In controller,EmployeeController created ,Details action method in that method created employeecontext object.
->In views,created employee folder and Details View .
===========================================================Generate hyperlinks using actionlink html helper==========practice this=======================================================
->continuation from above ,create another action method name "Index" in Employeecontroller.
===========================================================Working with multiple tables in mvc===============================================================

 ASP.NET MVC (Model-View-Controller),  the main concepts should learn:

### 1. **MVC Architecture**
Understand the core architecture and design pattern of MVC, which separates an application into three main components:
   - **Model:** Represents the application's data and business logic.
   - **View:** Represents the presentation layer (UI).
   - **Controller:** Handles user input and interactions, updating the Model and View accordingly.

### 2. **Routing**
Learn about routing, which is how ASP.NET MVC maps URLs to specific controllers and actions. Understand how to define custom routes and the use of route parameters.

### 3. **Controllers and Actions**
Controllers are the heart of the MVC framework. Learn how to create controllers and actions, and how actions respond to HTTP requests.

### 4. **Views and Razor Syntax**
Views are responsible for rendering HTML to the browser. Get familiar with the Razor view engine, which allows you to mix HTML with C# code seamlessly.

### 5. **Models and Data Access**
Learn about creating models that represent your data. Understand how to interact with databases using Entity Framework or other data access technologies.

### 6. **Scaffolding**
Scaffolding is a powerful feature that automatically generates code for CRUD (Create, Read, Update, Delete) operations. Learn how to use scaffolding to quickly develop functional applications.

### 7. **Validation and Data Annotations**
Understand how to validate user input using data annotations and model validation techniques to ensure data integrity.

### 8. **Dependency Injection**
Learn about dependency injection, a design pattern used to achieve Inversion of Control (IoC) between classes and their dependencies.

### 9. **Session Management and State**
Understand how to manage user sessions and state, including using cookies and session variables.

### 10. **Authentication and Authorization**
Learn how to implement user authentication and authorization using ASP.NET Identity or other authentication frameworks.

### 11. **Asynchronous Programming**
Get familiar with asynchronous programming in ASP.NET MVC, which can improve the performance of your web applications by allowing non-blocking operations.

### 12. **Error Handling and Logging**
Understand how to handle errors and exceptions, and learn about logging techniques to track and diagnose issues.

### 13. **Unit Testing**
Learn the basics of unit testing in ASP.NET MVC applications, including creating testable code and using testing frameworks like NUnit or MSTest.

### 14. **RESTful APIs**
Understand how to create and consume RESTful APIs, which are essential for building modern web applications.

### 15. **Bundling and Minification**
Learn about bundling and minification techniques to optimize the performance of your web application by reducing the size and number of HTTP requests.

By mastering these concepts, you'll be well-equipped to build robust and efficient web applications using ASP.NET MVC. If you have any specific questions about any of these topics, feel free to ask!










