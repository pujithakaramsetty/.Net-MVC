Ado.net entity framework works as intermediate between ASP.Net MVC Application and Database in SQL server.
-->Master pages for mvc is layout 

 In this video, we‚Äôre going to talk about ASP.NET MVC layouts. Today, we‚Äôll go over how to design layouts for MVC apps. Layouts are basically like master pages in ASP.NET. 
We'll look at how to set up a master page for an MVC app and how to configure it. In MVC, we refer to master pages as layouts. So, how do we create these layouts? They usually have 
a .cshtml extension, and that‚Äôs the key.

A layout component is where the main content of your page gets displayed. The `RenderBody` function is used to specify where that content goes. If you want to create different sections
in your layout page, you can do that with `RenderSection`. Think of layouts like master pages in ASP Web Forms. In MVC, layouts use the .cshtml extension. The key parts of a layout are 
`RenderBody` and `RenderSection`. `RenderBody` tells where the content should show up, and you can define multiple areas within the layout as needed.

To get things rolling, we need to set up different areas using the render section. To use the sections you've defined on your pages, you'll need to pull in the components from the Nate
section. To see if the section is working, we have to check the function properties section. These are some properties and functions we usually rely on when designing a layout page. 
So, let‚Äôs dive into how to create a layout for our MVC app and go over the key concepts related to layouts.

"Alright, let‚Äôs switch over to Visual Studio and add a layout page. If you‚Äôre adding a page that needs to be accessed from any controller, we should put it in a special folder in the 
views. I‚Äôm going to create a new folder and call it 'Shared.' We know that the Shared folder in views allows any resources you put there to be accessed from any controller. So, if you 
want something to be available globally, that‚Äôs the way to do it."

I'm adding a new view to the shade folder, and it's an MVC view that I'm calling "_site" ‚Äì you can name it whatever you want. Typically, partial views and layouts have an underscore 
prefix. I'm naming the layout "site," which is fine. Now, we'll uncheck the option to use a layout page since this page itself is a layout, so we won't be using any layout page for now.



span as - I'm marching and I will put the heading nourish ID ok Hyderabad fine now below this I will add another row in the row we have two cells in the left cell and the right cell 
so the table contains two rows initially the top row and the middle row and for the middle row I will put height is some 300 pixels and bottom I will add another row in that we will 
have a cell and here we will put some copyright copy right 2018 yeah and some details like some faculty so like courses so projects okay some development something now we

have a table with 3 rows defined in the three rows we are configuring the table row 1 2 & 3 we are configuring a header and we are defining a footer in this table row we will use the 
left cell with the menu let's add an odd unordered list and put some list item we will define some hyperlinks HTML dot action link I will put the link text as home and it needs to go
to an action called home fine okay another I will put another link I will say HTML dot action link as about about that is the link text and I will

use about fine I will add another list item at the net HTML dot action link then contact and contact okay three hyperlinks are defined home about in contact so let's put the total 
table width here table width as some 800 pixels fine and here the left cell width I will define as 250 pixel fine and I will define the right cell here as with 550 pixel that's fine 
so we have two columns in the middle row so left we have a menu for home about and contact and the contents of home about and contact must be displayed in the right

panel inside this cell that means in this right cell I have to render the contents then just I have to define a function here render body so render body is a function that specifies 
where the page contents must be rendered okay after configuring the page let's put some spice here I will set the style for the header rope rope this style will use some background color
so background color let's put the background color as gray dark slate gray yeah and let's put some color as white fine and the bottom

row also I will put a style and let's make the text alignment to Center text align to center the same effect I will define for the footer also so style so background color let's put
so dark slate gray or some green and I say color to white and text align to Center fine after designing the page actually our intention of the UI is to display a header and a footer and 
in the middle two columns left we have a panel for navigation and right we are rendering the content so this render body defines where your page content

must be rendered okay once the initial layout is ready there are several more things to update into this layout once the initial layout is ready let's apply this layout to our pages
how so let's go to the controllers and add a controller here I will select the controller name as home controller so in this home controller we will define some actions the first action
is home okay and another action action result is about okay it should return a view and let's add another action contact action result

contact okay let's return a view fine now let's add the views so that they can use the layout that we design so I'm adding the view right click and add view so the view is an empty 
view your name is and here it is prompting for use a layout page so select use layout page and you choose which layout piece to apply our layout page is in views shared that is site
dot c sh t ml we are applying that then add now a view is added for home once the view is added for home you can put any content here let's copy some

content and put in the home page so just i will copy a paragraph and I will put that paragraph information here fine now we will go to the controller about and home controller about 
add a view and it's also an empty and use the same layout page add and here I will define about and some paragraph information here again okay let's just first a change reducing this 
about related content there fine let's add one more here now here another question is how we can apply a layout to a view that is not using a layout

initially means I will add a view for contact while adding the view I am NOT selecting a layout page so that means when I add this it is not going to use the layout page if you are
trying to use the layout page then what you have to do is simple you have to use at the niche so a attribute layout is equal to what's the layout page you want to apply till / view slash
shared slash underscore site dot CSS HTML so this is the page that we want to use as layout and put a header here and I say contact us okay and here

I want to display some address some address information so HR add some nourish ID coding something so if the layout is not initially defined you can Delta apply the layout just by 
configuring the attribute layout now let's start and see how this works we will start with the index page so we designed a layout and we are using the same layout for all the pages home 
about and contact these are all the actions that are going to use the same layout so a uniform appearance across the pages there are several more options to

discuss about the layouts that we will see after achieving the primary goal right so first we will apply a simple layout for all our pages and see what we can implement into this layout 
you can see now this is the layout page defined so we will make the footer span everywhere then just go to the site and the footer this cell we will put call span to two and you can see 
the footer will merge to the two columns okay that's fine and now when user clicks on about it gets the about and contact so we just designed a simple

layout for our MVC application so user takes on home and about and contact it gets that information and display so this is a simple example of how we design a layout for MBC now what 
else you can configure in a layout what are the various options to know about layout that we will discuss in our next video .




### Summary
In this video session from Nourish Technologies, the presenter elaborates on designing layouts for ASP.NET MVC applications, comparing layouts to ASP.NET master pages. The video begins with an overview of the layout structure, emphasizing key components like the `RenderBody` and `RenderSection` functions. The presenter details the process of creating a layout page, including its placement in the shared folder for accessibility across controllers. Using Visual Studio, a demonstration follows where a new layout page is created, named `site.cshtml`, featuring a header, navigation menu, and footer. The presenter explains how to integrate this layout into various views, ensuring uniformity across the application. Moreover, the video touches on applying layouts dynamically to views that initially do not use them. The session concludes with a demonstration of how to modify the footer to span across columns and hints at more advanced layout configurations to be covered in future videos.

### Highlights
- üé® **Understanding Layouts**: Layouts in ASP.NET MVC serve a similar purpose to master pages in ASP.NET Web Forms, providing a consistent structure across views.
- ‚öôÔ∏è **Key Functions**: The `RenderBody` function specifies where content is rendered, while `RenderSection` allows for defining multiple areas within a layout.
- üóÇÔ∏è **Shared Folder Usage**: A special folder named "shared" is created to store the layout page, making it accessible across various controllers and actions.
- üõ†Ô∏è **Building the Layout**: The video walks through the design process of a layout page, including creating a table structure for navigation and content rendering.
- üìÑ **Integrating Views**: The presenter demonstrates how to apply the newly created layout to different views using Visual Studio, ensuring a uniform appearance.
- ‚úèÔ∏è **Dynamic Layout Application**: The video shows how to apply a layout to views that do not initially use one by dynamically setting the layout attribute.
- üìÖ **Future Discussions**: The session ends with a promise of further exploration into advanced layout features in upcoming videos.

### Key Insights
- üìö **Layouts as Structural Templates**: Layouts in ASP.NET MVC function as templates that provide a common structure for web pages. They help maintain a consistent user experience 
across different parts of an application, similar to traditional master pages in ASP.NET Web Forms. This structural approach allows developers to focus on the unique content of each
page while relying on a standardized design framework.

- üîÑ **RenderBody and RenderSection Functions**: The `RenderBody` function is critical in defining where the content of a specific view will be displayed within the layout. 
Conversely, `RenderSection` allows developers to create additional customizable areas in a layout for more complex designs. These functions provide flexibility and modularity, 
enabling developers to easily adjust the layout as needed.

- üåê **Shared Folder for Reusability**: By placing layout files in the "shared" folder, developers can ensure that these resources are accessible across all controllers and views 
in the application. This promotes reusability and reduces duplication, thus streamlining the development process and enhancing maintainability.

- üìê **Designing with HTML and CSS**: The video illustrates the importance of front-end design skills, showing how to use HTML tables and CSS styles to create a visually appealing
layout. By customizing the layout's look through CSS properties, developers can enhance user engagement and improve the overall aesthetic of the application.

- üß© **Integrating Functionalities into Views**: The presenter highlights how to connect various views to the layout, demonstrating the integration of multiple actions within the 
MVC framework. This ensures that user interactions with the application yield consistent and expected results, reinforcing the importance of a unified layout.

- ‚öôÔ∏è **Dynamic Layout Application**: The ability to apply layouts dynamically to views that do not initially use them is a powerful feature of MVC. By utilizing the attribute layout 
setting, developers can easily incorporate existing layout designs into new views, thus ensuring consistency without the need for extensive rewrites.

- üöÄ **Future Enhancements and Features**: The promise of exploring more advanced features related to layouts in future videos indicates a commitment to continuous learning and
development. This suggests that the concepts introduced are foundational, with deeper functionalities available for developers looking to enhance their applications further.

The video effectively demystifies the process of designing layouts in ASP.NET MVC applications, providing practical examples and insights that developers can leverage in their projects.
By understanding the foundational concepts of layouts, developers can create more structured, maintainable, and visually appealing web applications.


### Summary

In this video session presented by Sadaqa Sharma, the focus is on extending layout functionalities within ASP.NET MVC applications. Following a brief recap of the previous session on how to handle layouts, the video dives into customizing layouts for better usability. The presenter explains how to create a shared layout view, referred to as `_Site.cshtml`, which serves as a uniform interface for the application. Key functionalities such as `RenderBody` and `RenderSection` are introduced, which allow for the customization of specific page sections like the head and body. 

The session provides practical examples demonstrating how to implement multiple sections using the `RenderSection` function, allowing developers to add scripts and styles specific to each page. The presenter walks through the process of making sections optional or mandatory, ensuring flexibility in layout design. The video also covers how to check if a section is defined and how to display default content if it is not, thereby enhancing user experience. By the end of the session, viewers gain comprehensive knowledge about managing layouts in ASP.NET MVC, including rendering custom sections and applying conditional logic.

### Highlights
- üé® **Introduction to Layouts**: The session begins with a brief overview of the importance of layouts in achieving a uniform appearance across the application.
- üîç **Creating Shared Layouts**: Viewers learn how to create a shared layout view for consistent UI design across multiple pages.
- üõ†Ô∏è **Using RenderBody**: The `RenderBody` function is explored as a means to define where the main content of pages is rendered within the layout.
- üß© **Implementing RenderSection**: The session explains how to use `RenderSection` to customize individual sections of the layout, such as the head section.
- ‚úÖ **Mandatory vs. Optional Sections**: The concept of making sections mandatory or optional is discussed, allowing for greater customization flexibility.
- üì¶ **Conditionally Rendering Sections**: Viewers learn how to verify if a section is defined and render alternative content if it is not, enhancing user experience.
- üöÄ **Practical Implementation Examples**: The session provides practical coding examples that illustrate how to apply the discussed concepts in real scenarios.

### Key Insights
- üíª **Importance of Layouts in MVC**: Layouts serve as a crucial backbone for the user interface in ASP.NET MVC applications, promoting a consistent user experience. By defining a
layout once, developers can ensure that all pages will inherit the same structure and styling, reducing redundancy and maintenance efforts.

- üé® **Customizing Head Sections**: The ability to customize the head section of a layout using `RenderSection` enables developers to add page-specific scripts and styles. This 
flexibility is essential for managing dependencies and ensuring that each page can function independently without affecting others.

- üè∑Ô∏è **Conditional Section Rendering**: The implementation of checks to see if a section is defined allows for dynamic content rendering. This feature is particularly useful in 
applications where certain functionalities may only be relevant for specific pages, thus allowing developers to maintain clean and efficient layouts.

- üìä **Improving User Experience**: By providing alternative content when sections are not implemented, developers can enhance the user experience. This approach prevents blank spaces 
or missing elements on a page, maintaining a cohesive appearance and guiding users effectively.

- üìÖ **Optional Sections for Enhanced Flexibility**: Making sections optional helps in scenarios where different pages have varying requirements. This design choice allows developers
to create minimalist layouts for simpler pages while providing richer content for more complex ones.

- üöÄ **Real-World Application**: The practical examples demonstrated in the session bridge the gap between theory and practice, showing developers how to apply what they‚Äôve learned 
directly to their projects. This hands-on approach reinforces learning and equips viewers with the confidence to implement similar features in their applications.

- üîÑ **Future Directions**: The session concludes with a preview of the next topic, which will cover managing views in ASP.NET MVC. This continuity encourages viewers to keep learning
and exploring the expansive capabilities of the framework, fostering an ongoing journey of improvement and mastery in web development.

Overall, this video serves as a comprehensive guide for developers looking to deepen their understanding of layout management in ASP.NET MVC applications. By leveraging the discussed 
techniques and principles, developers can create more dynamic, user-friendly, and maintainable web applications.



[Music] hello welcome to nourish technologies this is sadaqa Sharma we are continuing our asp.net MVC video sessions and in the previous topic we discussed about how do we handle
layouts for MVC application so in our previous video session we learnt what is a layout how do we create a layout and how do we use the layout for our pages now let's see some more 
extensions to that layout so I will give a glance and if you are new to this video you can watch the previous video where we detailee discussed about

layouts in a our project we added a folder called shared into views and into shared folder we added a view underscore site dot CS HTML and in this view we designed a UI so this UI
is for accessing and displaying the details the same UI will be used for the entire application so that the appearance will be uniform so what we designed in this UI let's run this and 
see actually in the previous video session we have seen how to create a controller and with actions home about end contact we added views for home about and contact

in these views we have implemented the layout so that whenever the page is rendered it will use the layout and put the contents within the layout defined so let's run this and see 
initially how the layout looks like and we will also observe what additional functionality is to perform yeah this is the page that we design a layout and a navigation with the home
about and contact so we are using the same layout for entire application now let's see what's the additional functionalities that we can define

actually so we learnt about a function render body this indicates the location where the resulting markup must be rendered now if I want to render multiple sections in a page how to
define multiple sections in a page that means I want to customize the head section so that I can later add scripts styles individually for every page then how we can make the head 
section customizable in every page so generally in a speed or net waveforms you have content placeholders you can use as many as content placeholders you

want in the body or in the head section now in MVC the render body function defines where the body content should be rendered the additional sections are defined by using render section
so render section is a function which is used to define the additional sections to be implemented and customized in your page how to configure these additional sections for example 
see I will go to the layout page our layout pages side dot CS HTML in this layout page so already in the body section we are implementing this render body now I want

the head section also to be customized then what we will do is here in the head section we will use a function render section and I will define a name for the section section name is
some head section okay now this head section whatever you define is mandatory to implement if you want this section as an optional section to be implemented then you can use an required
attribute and set it to so false it's a boolean property that means required false indicates that this is an optional section so to be

implemented if you want you can implement this section so what I want to do is when user invokes about page so in the about page I want to implement that header section head section
so how do we implement the sections that means about page needs some Styles about page needs some scripts that are to be rendered in the head section of the page then how you can render 
that already we have an area for head section defined with the render section and the section name is head okay now let's go to the about page and how to implement

the sections that you have defined in layout to implement any section that is defined in the layout we have to use a function we have to use section section and what is that section name
the section name is head section and to implement that head section we need to configure the functionality as a block so what you want to render in that head section you have to define 
that here so I will put a Spile in the style I will define a heading two and wherever that heading two is there we will define some

background color so as some blue and some color as white and text align to centered yeah now at the same time in the head section I want to implement some script and this script should
show a basic alert alert so alert displaying so about about nourish ID okay that's a general script defined so our intention is the section with head defined in this about page will
contain two elements one a script and style these elements are rendered in the head section defined so where the head section is defined you

can see in layout page the head section is defined in the page head area so whatever you defined in about so through this section element so it is going to render everything inside
the head section of the page let's run this and see that means we defined a head section and we are implementing the styles and scripts into that head section let's see I will run 
the page again here okay and let's see home page is not implementing the head section because we made the head section as optional by specifying

required as false that means it's not mandatory to implement that section in every page so only about page is implementing that head section by adding some extra styles and script you 
can observe that the home page that is rendered is not using any head section is not implementing any head section so home is normal but when I go to contact still contact is also not
implementing but when I go to about it shows an alert about nourish ID and I say ok and you can see the styles are affected let's go to the source right

click and view page source you can observe that the styles and scripts are exactly rendered in the head section of the page that means our view is using lay out and into the layout we
are implementing the head section so where we rendered styles and scripts so if you want to define multiple sections in a page you can do that so by using a function render section 
let's implement another section and see for example I will go to the design in the design wherever the body is rendered here I will take I will

remove this and I will put it do and this view will have an height style put height as we will define the height as 200 pixels 200 pixel is the height fine in this div we will use the
Trender body write render body is defined in the do okay and I am adding another do below this and in this deal I will put style so height height as 100 pixels because overall the height of our row is 300 we will define hundred pixels for the height now very important is this is the area where I want to render some advertisements some ads to

be rendered there so how we can render advertisements means how we can define a section here so that I can use that section for rendering advertisements and every page will not implement that ads area so in that case we will use render section and we define as ads section and we will make required as false so it is not mandatory to implement that section and if any page has to implement this section how it will implement let's see let's go to the contact page in contact page I want to implement that

advertisements area so we have to use a helper section and the section name is adds sexing okay add section has to use a simple image s VAR c is equal to so we will put some images in 
images I will put images into images we will add some Pepsi Pepsi dot jpg and with width so we will use the width of the same defined for that do actually the width is 550 pixels so I
will make that width as as some 400 pixels okay then height I will just set the height 200 F fine and one more is I will put this do in a deal

with align to Center and I will add that image into that area that means we are implementing an advertisement section where we are displaying the advertisements so I will add a new 
folder into this project so that advertisement to show so I will add a new folder called images into the folder we will add some existing item and I have some images related to 
advertisements we will add that image here so a Pepsi or relents okay that's the path defined here so we are accessing and using that image okay now

similarly in the home page also I want to implement that advertisement section so it's not mandatory to implement in every location so if I want to implement then I will use section 
and section name is add section and here I need to keep a do with align to center and in the do I will put an image source as the images yeah in the images we will put our digital dot
jpg so width is some 400 and height is 100 fine now we will set in contact also the image path search l / images and all that fine so we designed

two sections in our layout one is head another one is advertisements so important is it's not mandatory to implement only two pages are implementing this ads section one is home another
one is contact let's see how that displace let's start with the start with the home page yeah you can see the home page is implementing that advertisement section and about is not
implement that section so about is not having that advertisement area contact is implementing and it is having that definition now here one more

important point is if any page is not implementing that section you can verify whether that section is implemented or not if not then you can put some alternative content for example
about is not implementing that section if it is not implementing the section you can put some alternative content instead of what they haven't defined right so then what you can do is
you can go to the layout page and this ad section is not mandatory to implement if they implemented that whatever configuration they defined it will be used else we can

put some default content but first we have to know whether it is implemented or not how do we know whether that section is implemented or not we have to use a condition so let's use
a condition so I will make it required to false okay fine now I will remove this I will remove this and I will check a condition here if there is a property so is section defined so 
which section defined you have to define that section so section is a adds section if the section is defined called adds section right if the

section is defined it has to render that section else if the section is not defined then what we will do is we will put an alternative content and we will just put some align to Center
and here I will put an option here saying that I will put a simple italicized saying that adds adds here right that means we are verifying whether the section is implemented or not if
the section is implemented then whatever they configure it will be rendered if section is not implemented then we will put some default contact so

that you can manage by verifying whether the section is defined or not so you can do that by using the function each section define it returns boolean true false if the section is 
defined it will implement else it will use an alternative content there let's see now let's go to the home page home page is implementing the section contact page is also implementing
the section and about is not implementing the section then let's see what happens if a section is not implemented so home is implementing contact is also

implementing in about we are not implementing then you can see an alternative comes here that means we can verify whether the section defined or not and we can render that alternative
content so three important options we have to know how to render the body how do we render the section and how do we acts implement the section by using the helper section and how do 
we verify whether the section is defined or not is section define this is a boolean function which verifies whether the section defined or not so we

can implement multiple sections in a layout by using render section and section helpers so this is how we can design a layout and we can define multiple sections into the layout so
this is the complete scenario of working with layouts in MVC in the next session we will discuss about how do we handle the views thank you [Music]


