# Chapter Summary: Creating an ASP.NET MVC Application

## Introduction

In this chapter, we delve into the **ASP.NET MVC** framework, exploring its architecture and the steps to create a basic application using **ASP.NET MVC 5.2**, **C# 6**, and 
**Visual Studio 215**. The significance of understanding this framework lies in its effective separation of concerns, which enhances the development process for web applications.
Key concepts such as **controllers**, **models**, **views**, and the folder structure within an **MVC application** are essential for grasping how ASP.NET MVC operates. Additionally, 
the discussion provides a practical approach to setting up the development environment, enabling developers to begin building their applications immediately.

## Setting Up the Development Environment

To create an ASP.NET MVC application, it is crucial to establish the correct **environment setup**:

- **Frameworks and Tools**:
  - **.NET Framework 4.6**
  - **ASP.NET 4.6**
  - **MVC 5.2** (the latest stable release as of this session)
  - **C# 6**
  - **Visual Studio 215**

- **Visual Studio** provides the necessary support for both MVC 5 and MVC Core, with the option to use older versions (e.g., Visual Studio 213) for compatibility.

The initial setup ensures that developers have access to all features and libraries required for development.

## Creating an ASP.NET MVC Application

The process of creating an ASP.NET MVC application includes the following steps:

1. **Launching Visual Studio**:
   - Select **New Project** from the start menu.
   
2. **Selecting Project Template**:
   - Choose the **Visual C#** language category.
   - Navigate to the **Web** section and select **ASP.NET Web Application**.
   - Specify a name for the project (e.g., "MVC Video Demo") and choose a location to save it.

3. **Choosing the Application Type**:
   - Upon selection, a prompt appears to choose a project template:
     - Available templates include **Empty**, **Web Form**, **MVC**, **Web API**, and others.
     - For a foundational understanding, the **Empty Application** template is recommended to build the application from scratch.

4. **Adding References**:
   - References are libraries necessary for the application to function correctly.
   - The primary library for MVC applications is **System.Web.Mvc**.

5. **Unit Testing**:
   - Although MVC supports **Test Driven Development**, the focus at this stage will be on the core application development, deferring unit tests for later discussions.

## Understanding the MVC Architecture

Once the project is set up, it's important to understand the basic **file structure** of the MVC application:

1. **App_Data**:
   - Contains local database files (with extensions **.mdf** and **.sdf**), providing an inbuilt SQL server for development.

2. **App_Start**:
   - Comprises classes executed on application startup, including:
     - **RouteConfig**
     - **FilterConfig**
     - **BundleConfig**
     - **StartupAuth**
     - **WebApiConfig**

3. **Controllers**:
   - Houses **controller classes** that contain the application logic.
   - Controllers respond to various HTTP requests and are central to the MVC architecture.

4. **Models**:
   - Contains business logic and classes representing data.
   - Responsible for interacting with the database, managing data operations.

5. **Views**:
   - Represents the **User Interface (UI)** of the application.
   - Contains views, partial views, and layouts for rendering the application’s front end.

### Summary of Important Folders

- **App_Data**: Local database files.
- **App_Start**: Classes for application initialization.
- **Controllers**: Application-specific logic.
- **Models**: Data representation and database interaction.
- **Views**: User interface components.

## Request Flow and Functionality

The next logical step after understanding the folder structure is to explore how **request flow** operates within an MVC application. This includes how user requests are handled and
routed to the appropriate controllers and views, forming the backbone of the MVC framework’s functionality.

## Conclusion

In conclusion, creating an ASP.NET MVC application involves a systematic approach, starting from setting up the development environment to understanding the foundational architecture 
of MVC. The essential components of controllers, models, and views are critical for building robust web applications. By grasping these concepts, developers can effectively utilize 
the ASP.NET MVC framework to create scalable and maintainable software solutions. As we progress, further exploration of request handling and functionality will enhance our understanding
and application of this powerful framework.
